<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Persistent Session with 30-Minute Timeout</title>
  <style>
    /* ---------- Global Styles ---------- */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #000000;
    }
    .container {
      max-width: 600px;
      margin: 50px auto;
      padding: 20px;
      background-color: #cf2f2f;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .hidden {
      display: none;
    }
    input[type="password"],
    textarea {
      width: 100%;
      padding: 10px;
      margin: 5px 0 15px 0;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }
    button {
      background-color: #ec3ec1;
      color: rgb(0, 0, 0);
      padding: 10px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #ffffff;
    }
    .error {
      color: rgb(0, 47, 255);
    }
    /* ---------- Text Blocks Styles ---------- */
    .text-block {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      position: relative;
      background-color: #ffffff;
    }
    .delete-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background-color: #e74c3c;
      border: none;
      color: white;
      padding: 5px 8px;
      border-radius: 3px;
      cursor: pointer;
    }
    .delete-btn:hover {
      background-color: #c0392b;
    }
  </style>
</head>
<body>
  <!-- ---------- Login Screen ---------- -->
  <div class="container" id="loginScreen">
    <h2>Login</h2>
    <p>Please enter your password:</p>
    <input type="password" id="passwordInput" placeholder="Enter password">
    <button id="loginBtn">Login</button>
    <p class="error" id="loginError"></p>
  </div>

  <!-- ---------- Admin Panel ---------- -->
  <div class="container hidden" id="adminPanel">
    <h2>Admin Panel</h2>
    <p>Upload new text (max 200 characters):</p>
    <textarea id="adminText" maxlength="200" placeholder="Enter text here"></textarea>
    <button id="uploadBtn">Upload Text</button>
    <h3>Uploaded Texts:</h3>
    <div id="adminTextsContainer">
      <!-- Dynamically generated text blocks will appear here -->
    </div>
  </div>

  <!-- ---------- User Panel ---------- -->
  <div class="container hidden" id="userPanel">
    <h2>User Panel</h2>
    <h3>Uploaded Texts:</h3>
    <div id="userTextsContainer">
      <!-- Only admin-uploaded text blocks (without delete options) will appear here -->
    </div>
  </div>

  <script>
    /***********************************************************************
     * JavaScript Code Documentation:
     *
     * This script implements:
     * 1. A login mechanism differentiating between admin and normal users.
     * 2. Uploading text blocks (max 200 characters) by admin.
     * 3. Persistent storage of text blocks (using localStorage) so that they
     *    remain across sessions.
     * 4. A session mechanism that keeps users logged in for 30 minutes after login.
     *    After 30 minutes, the session expires and the user is returned to the login screen.
     * 5. Displaying uploaded texts to both admin and normal users.
     * 6. A delete button (only available for admin) to remove text blocks.
     *
     * Two passwords are defined as variables below. Adjust these values as needed.
     ***********************************************************************/

    // ----------------- Configuration -----------------
    const normalPassword = "אנילוזראפס";   // Password for normal users
    const adminPassword  = "אנימנהלמגניב";   // Password for admin users
    const SESSION_DURATION = 30 * 60 * 1000; // Session duration: 30 minutes in milliseconds

    // ----------------- Global Variables -----------------
    let texts = [];           // Array to store text blocks, each as { id, text }
    let textIdCounter = 0;    // Unique ID counter for text blocks

    // ----------------- Local Storage Keys -----------------
    const STORAGE_KEY_TEXTS = "storedTexts";
    const STORAGE_KEY_ID_COUNTER = "textIdCounter";
    const STORAGE_KEY_SESSION = "session";

    // ----------------- Local Storage Functions -----------------

    /**
     * loadTexts()
     * Loads stored texts and the text ID counter from localStorage.
     */
    function loadTexts() {
      const storedTexts = localStorage.getItem(STORAGE_KEY_TEXTS);
      const storedCounter = localStorage.getItem(STORAGE_KEY_ID_COUNTER);
      if (storedTexts) {
        texts = JSON.parse(storedTexts);
      }
      if (storedCounter) {
        textIdCounter = parseInt(storedCounter, 10);
      }
    }

    /**
     * saveTexts()
     * Saves the texts array and the text ID counter to localStorage.
     */
    function saveTexts() {
      localStorage.setItem(STORAGE_KEY_TEXTS, JSON.stringify(texts));
      localStorage.setItem(STORAGE_KEY_ID_COUNTER, textIdCounter.toString());
    }

    // ----------------- Session Functions -----------------

    /**
     * createSession(userType)
     * Creates a session object and saves it to localStorage.
     * @param {string} userType - "admin" or "user"
     */
    function createSession(userType) {
      const session = {
        userType: userType,
        loginTime: Date.now()
      };
      localStorage.setItem(STORAGE_KEY_SESSION, JSON.stringify(session));
    }

    /**
     * getSession()
     * Retrieves the current session object from localStorage.
     * @returns {object|null} - The session object or null if not found.
     */
    function getSession() {
      const sessionStr = localStorage.getItem(STORAGE_KEY_SESSION);
      return sessionStr ? JSON.parse(sessionStr) : null;
    }

    /**
     * clearSession()
     * Clears the current session from localStorage.
     */
    function clearSession() {
      localStorage.removeItem(STORAGE_KEY_SESSION);
    }

    /**
     * checkSession()
     * Checks if a session exists and if it is still valid (within 30 minutes).
     * If valid, returns the session object; otherwise, clears the session and returns null.
     * @returns {object|null}
     */
    function checkSession() {
      const session = getSession();
      if (session && (Date.now() - session.loginTime < SESSION_DURATION)) {
        return session;
      } else {
        clearSession();
        return null;
      }
    }

    /**
     * startSessionTimer()
     * Starts an interval timer that checks every minute if the current session
     * has expired. If expired, reloads the page to show the login screen.
     */
    function startSessionTimer() {
      setInterval(() => {
        if (!checkSession()) {
          alert("Your session has expired. Please log in again.");
          location.reload();
        }
      }, 60000); // Check every 60 seconds.
    }

    // ----------------- Helper Functions -----------------

    /**
     * updateTextsDisplay()
     * Updates the display of text blocks in both the admin and user panels.
     * The admin view includes a delete button for each text block.
     */
    function updateTextsDisplay() {
      const adminContainer = document.getElementById("adminTextsContainer");
      const userContainer  = document.getElementById("userTextsContainer");
      adminContainer.innerHTML = "";
      userContainer.innerHTML  = "";

      texts.forEach(textObj => {
        // Create text block for admin panel.
        const adminDiv = document.createElement("div");
        adminDiv.className = "text-block";
        adminDiv.innerText = textObj.text;

        // Delete button for admin view.
        const deleteBtn = document.createElement("button");
        deleteBtn.className = "delete-btn";
        deleteBtn.innerText = "Delete";
        deleteBtn.onclick = function() { deleteText(textObj.id); };
        adminDiv.appendChild(deleteBtn);
        adminContainer.appendChild(adminDiv);

        // Create text block for user panel (no delete button).
        const userDiv = document.createElement("div");
        userDiv.className = "text-block";
        userDiv.innerText = textObj.text;
        userContainer.appendChild(userDiv);
      });
    }

    /**
     * deleteText(id)
     * Deletes a text block by its unique id and updates the displays.
     * @param {number} id - The unique id of the text block to delete.
     */
    function deleteText(id) {
      texts = texts.filter(textObj => textObj.id !== id);
      saveTexts();
      updateTextsDisplay();
    }

    // ----------------- Event Listeners -----------------

    // Login button click event.
    document.getElementById("loginBtn").addEventListener("click", function() {
      const enteredPassword = document.getElementById("passwordInput").value;
      const loginError = document.getElementById("loginError");

      // Determine user type based on password.
      if (enteredPassword === adminPassword) {
        createSession("admin");
        document.getElementById("loginScreen").classList.add("hidden");
        document.getElementById("adminPanel").classList.remove("hidden");
        startSessionTimer();
      }
      else if (enteredPassword === normalPassword) {
        createSession("user");
        document.getElementById("loginScreen").classList.add("hidden");
        document.getElementById("userPanel").classList.remove("hidden");
        startSessionTimer();
      }
      else {
        loginError.innerText = "Incorrect password. Please try again.";
      }
    });

    // Admin text upload button click event.
    document.getElementById("uploadBtn").addEventListener("click", function() {
      const adminTextInput = document.getElementById("adminText");
      const adminText = adminTextInput.value.trim();

      if (adminText.length === 0) {
        alert("Please enter some text.");
        return;
      }
      if (adminText.length > 200) {
        alert("Text exceeds 200 characters limit.");
        return;
      }

      texts.push({ id: textIdCounter++, text: adminText });
      saveTexts();
      adminTextInput.value = "";
      updateTextsDisplay();
    });

    // ----------------- Initialization -----------------

    // Load stored texts.
    loadTexts();

    // Check for an existing valid session.
    const currentSession = checkSession();
    if (currentSession) {
      // If session exists and is valid, show the appropriate panel.
      document.getElementById("loginScreen").classList.add("hidden");
      if (currentSession.userType === "admin") {
        document.getElementById("adminPanel").classList.remove("hidden");
      } else {
        document.getElementById("userPanel").classList.remove("hidden");
      }
      startSessionTimer();
    }
    // Always update texts display.
    updateTextsDisplay();
  </script>
</body>
</html>
